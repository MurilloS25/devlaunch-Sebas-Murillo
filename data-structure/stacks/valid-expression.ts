/*
Su tarea es implementar una funci√≥n que verifique si una expresi√≥n dada es v√°lida en t√©rminos de par√©ntesis coincidentes. La funci√≥n 
debe determinar si los par√©ntesis en la expresi√≥n est√°n anidados y coincidentes correctamente.

La funci√≥n toma una cadena como entrada y crea una nueva pila. Itera a trav√©s de los caracteres de la expresi√≥n de entrada, insertando 
los par√©ntesis de apertura en la pila y sac√°ndolos cuando encuentra par√©ntesis de cierre para verificar pares coincidentes. Si los par√©ntesis 
coinciden correctamente, la funci√≥n devuelve `true`; de lo contrario, devuelve `false`.

**Algoritmo:**

1. Cree una pila vac√≠a llamada `stack`.
2. Itere a trav√©s de cada car√°cter en la cadena `expression` de entrada.
3. Si el car√°cter es un par√©ntesis de apertura ('(', '{', '['), introd√∫zcalo en `stack`.
4. Si el car√°cter es un par√©ntesis de cierre (')', '}', ']'):
- Extraiga el elemento superior de `stack`.
- Verifique si el elemento extra√≠do coincide con el par√©ntesis de cierre actual. Si no hay coincidencias o si la pila est√° vac√≠a al intentar extraer 
  los datos, devuelve "false".
5. Despu√©s de procesar todos los caracteres, comprueba si la pila est√° vac√≠a:
- Si la pila est√° vac√≠a, devuelve "true" (todos los corchetes coinciden).
- Si la pila no est√° vac√≠a, devuelve "false" (existen corchetes que no coinciden).
*/


//Es lo mismo que parenthese.ts, solo que mas optimizado y haciendo y uso de MAP

/* 
EXPLICACION DE PORQUE ES MEJOR
La versi√≥n con matchingBracket es m√°s eficiente y limpia.

üìå ¬øPor qu√©?

Acceso directo con matchingBracket[char]
Evita comparaciones manuales con if y switch.
Acceder a un objeto (O(1)) es m√°s r√°pido que evaluar m√∫ltiples condiciones en switch.
Menos l√≠neas de c√≥digo, m√°s claridad
La l√≥gica es m√°s f√°cil de entender y modificar.
Es m√°s f√°cil agregar m√°s tipos de par√©ntesis en el futuro. 

*/

function isBalanced(expression: string): boolean {
    const matchingBracket: { [key: string]: string } = {
        ')': '(',
        '}': '{',
        ']': '['
    };

    const stack: string[] = [];

    for (const char of expression) {
        if (['(', '{', '['].includes(char)) {
            stack.push(char);
        } else if ([')', '}', ']'].includes(char)) {
            if (stack.length === 0 || stack[stack.length - 1] !== matchingBracket[char]) {
                return false;
            }
            stack.pop();
        }
    }

    return stack.length === 0;
}

console.log(isBalanced("([{}])"));   
console.log(isBalanced("([)]"));     
console.log(isBalanced("([]{}())")); 
console.log(isBalanced("([]{})("));  
console.log(isBalanced("{[()]}"));   
